{"version":3,"sources":["../../../src/components/VTreeview/VTreeviewNode.ts"],"names":[],"mappings":";;;;;;;AACA;;AACA;;AAEA;;AAGA;;AACA;;AAGA;;AACA;;;;;;;;;;AAQA,IAAM,UAAU,GAAG,qBACjB,kBADiB,EAEjB,yBAAkB,UAAlB,CAFiB,CAAnB;AASO,IAAM,kBAAkB,GAAG;AAChC,EAAA,WAAW,EAAE,OADmB;AAEhC,EAAA,WAAW,EAAE;AACX,IAAA,IAAI,EAAE,MADK;AAEX,IAAA,OAAO,EAAE;AAFE,GAFmB;AAMhC,EAAA,KAAK,EAAE;AACL,IAAA,IAAI,EAAE,MADD;AAEL,IAAA,OAAO,EAAE;AAFJ,GANyB;AAUhC,EAAA,UAAU,EAAE;AACV,IAAA,IAAI,EAAE,MADI;AAEV,IAAA,OAAO,EAAE;AAFC,GAVoB;AAchC,EAAA,iBAAiB,EAAE;AACjB,IAAA,IAAI,EAAE,MADW;AAEjB,IAAA,OAAO,EAAE;AAFQ,GAda;AAkBhC,EAAA,YAAY,EAAE;AACZ,IAAA,IAAI,EAAE,MADM;AAEZ,IAAA,OAAO,EAAE;AAFG,GAlBkB;AAsBhC,EAAA,YAAY,EAAE;AACZ,IAAA,IAAI,EAAE,MADM;AAEZ,IAAA,OAAO,EAAE;AAFG,GAtBkB;AA0BhC,EAAA,OAAO,EAAE;AACP,IAAA,IAAI,EAAE,MADC;AAEP,IAAA,OAAO,EAAE;AAFF,GA1BuB;AA8BhC,EAAA,QAAQ,EAAE;AACR,IAAA,IAAI,EAAE,MADE;AAER,IAAA,OAAO,EAAE;AAFD,GA9BsB;AAkChC,EAAA,YAAY,EAAE,QAlCkB;AAmChC,EAAA,WAAW,EAAE;AACX,IAAA,IAAI,EAAE,MADK;AAEX,IAAA,OAAO,EAAE;AAFE,GAnCmB;AAuChC,EAAA,OAAO,EAAE;AACP,IAAA,IAAI,EAAE,MADC;AAEP,IAAA,OAAO,EAAE;AAFF,GAvCuB;AA2ChC,EAAA,MAAM,EAAE;AACN,IAAA,IAAI,EAAE,MADA;AAEN,IAAA,OAAO,EAAE;AAFH,GA3CwB;AA+ChC,EAAA,WAAW,EAAE,OA/CmB;AAgDhC,EAAA,OAAO,EAAE,OAhDuB;AAiDhC,EAAA,UAAU,EAAE,OAjDoB;AAkDhC,EAAA,aAAa,EAAE;AACb,IAAA,IAAI,EAAE,MADO;AAEb,IAAA,OAAO,EAAE;AAFI,GAlDiB;AAsDhC,EAAA,MAAM,EAAE,OAtDwB;AAuDhC,EAAA,UAAU,EAAE;AAvDoB,CAA3B;AA0DP;;;;gBACe,UAAU,CAAC,MAAX,GAA6B,MAA7B,CAAoC;AACjD,EAAA,IAAI,EAAE,iBAD2C;AAGjD,EAAA,MAAM,EAAE;AACN,IAAA,QAAQ,EAAE;AACR,MAAA,OAAO,EAAE;AADD;AADJ,GAHyC;AASjD,EAAA,KAAK;AACH,IAAA,IAAI,EAAE;AACJ,MAAA,IAAI,EAAE,MADF;AAEJ,MAAA,OAAO,EAAE;AAAA,eAAM,IAAN;AAAA;AAFL;AADH,KAKA,kBALA,CAT4C;AAiBjD,EAAA,IAAI,EAAE;AAAA,WAAO;AACX,MAAA,SAAS,EAAE,KADA;AAEX,MAAA,QAAQ,EAAE,KAFC;AAGX,MAAA,eAAe,EAAE,KAHN;AAIX,MAAA,SAAS,EAAE,KAJA;AAKX,MAAA,MAAM,EAAE,KALG;AAMX,MAAA,UAAU,EAAE;AAND,KAAP;AAAA,GAjB2C;AA0BjD,EAAA,QAAQ,EAAE;AACR,IAAA,QADQ,sBACA;AACN,aAAO,mCAAqB,KAAK,IAA1B,EAAgC,KAAK,YAArC,CAAP;AACD,KAHO;AAIR,IAAA,GAJQ,iBAIL;AACD,aAAO,mCAAqB,KAAK,IAA1B,EAAgC,KAAK,OAArC,CAAP;AACD,KANO;AAOR,IAAA,QAPQ,sBAOA;AACN,aAAO,mCAAqB,KAAK,IAA1B,EAAgC,KAAK,YAArC,CAAP;AACD,KATO;AAUR,IAAA,IAVQ,kBAUJ;AACF,aAAO,mCAAqB,KAAK,IAA1B,EAAgC,KAAK,QAArC,CAAP;AACD,KAZO;AAaR,IAAA,WAbQ,yBAaG;AACT,aAAO;AACL,QAAA,IAAI,EAAE,KAAK,IADN;AAEL,QAAA,IAAI,EAAE,CAAC,KAAK,QAFP;AAGL,QAAA,QAAQ,EAAE,KAAK,UAHV;AAIL,QAAA,aAAa,EAAE,KAAK,eAJf;AAKL,QAAA,MAAM,EAAE,KAAK,QALR;AAML,QAAA,IAAI,EAAE,KAAK;AANN,OAAP;AAQD,KAtBO;AAuBR,IAAA,YAvBQ,0BAuBI;AACV,UAAI,KAAK,eAAT,EAA0B,OAAO,KAAK,iBAAZ,CAA1B,KACK,IAAI,KAAK,UAAT,EAAqB,OAAO,KAAK,MAAZ,CAArB,KACA,OAAO,KAAK,OAAZ;AACN,KA3BO;AA4BR,IAAA,WA5BQ,yBA4BG;AACT,aAAO,CAAC,CAAC,KAAK,QAAP,KAAoB,CAAC,CAAC,KAAK,QAAL,CAAc,MAAhB,IAA0B,CAAC,CAAC,KAAK,YAArD,CAAP;AACD;AA9BO,GA1BuC;AA2DjD,EAAA,OA3DiD,qBA2D1C;AACL,SAAK,QAAL,CAAc,QAAd,CAAuB,IAAvB;AACD,GA7DgD;AA+DjD,EAAA,aA/DiD,2BA+DpC;AACX,SAAK,QAAL,CAAc,UAAd,CAAyB,IAAzB;AACD,GAjEgD;AAmEjD,EAAA,OAAO,EAAE;AACP,IAAA,aADO,2BACM;AAAA;;AACX,aAAO,IAAI,OAAJ,CAAkB,UAAA,OAAO,EAAG;AACjC;AACA;AACA,YAAI,CAAC,KAAI,CAAC,QAAN,IAAkB,KAAI,CAAC,QAAL,CAAc,MAAhC,IAA0C,CAAC,KAAI,CAAC,YAAhD,IAAgE,KAAI,CAAC,SAAzE,EAAoF,OAAO,OAAO,EAAd;AAEpF,QAAA,KAAI,CAAC,SAAL,GAAiB,IAAjB;AACA,QAAA,OAAO,CAAC,KAAI,CAAC,YAAL,CAAkB,KAAI,CAAC,IAAvB,CAAD,CAAP;AACD,OAPM,EAOJ,IAPI,CAOC,YAAK;AACX,QAAA,KAAI,CAAC,SAAL,GAAiB,KAAjB;AACA,QAAA,KAAI,CAAC,SAAL,GAAiB,IAAjB;AACD,OAVM,CAAP;AAWD,KAbM;AAcP,IAAA,IAdO,kBAcH;AACF,WAAK,MAAL,GAAc,CAAC,KAAK,MAApB;AACA,WAAK,QAAL,CAAc,UAAd,CAAyB,KAAK,GAA9B,EAAmC,KAAK,MAAxC;AACA,WAAK,QAAL,CAAc,QAAd;AACD,KAlBM;AAmBP,IAAA,QAnBO,sBAmBC;AACN,UAAM,QAAQ,GAAG,EAAjB;AAEA,UAAI,KAAK,YAAL,CAAkB,KAAtB,EAA6B,QAAQ,CAAC,IAAT,CAAc,KAAK,YAAL,CAAkB,KAAlB,CAAwB,KAAK,WAA7B,CAAd,EAA7B,KACK,QAAQ,CAAC,IAAT,CAAc,KAAK,IAAnB;AAEL,aAAO,KAAK,cAAL,CAAoB,KAApB,EAA2B;AAChC,QAAA,IAAI,EAAE,OAD0B;AAEhC,QAAA,WAAW,EAAE;AAFmB,OAA3B,EAGJ,QAHI,CAAP;AAID,KA7BM;AA8BP,IAAA,UA9BO,wBA8BG;AACR,UAAM,QAAQ,GAAG,CACf,KAAK,YAAL,CAAkB,OAAlB,IAA6B,KAAK,YAAL,CAAkB,OAAlB,CAA0B,KAAK,WAA/B,CADd,EAEf,KAAK,QAAL,EAFe,EAGf,KAAK,YAAL,CAAkB,MAAlB,IAA4B,KAAK,YAAL,CAAkB,MAAlB,CAAyB,KAAK,WAA9B,CAHb,CAAjB;AAMA,aAAO,KAAK,cAAL,CAAoB,KAApB,EAA2B;AAChC,QAAA,WAAW,EAAE;AADmB,OAA3B,EAEJ,QAFI,CAAP;AAGD,KAxCM;AAyCP,IAAA,SAzCO,uBAyCE;AAAA;;AACP,aAAO,KAAK,cAAL,CAAoB,YAApB,EAA2B;AAChC,QAAA,WAAW,EAAE,yBADmB;AAEhC,QAAA,KAAK,EAAE;AACL,2CAAiC,KAAK,MADjC;AAEL,8CAAoC,KAAK;AAFpC,SAFyB;AAMhC,QAAA,IAAI,EAAE,SAN0B;AAOhC,QAAA,EAAE,EAAE;AACF,UAAA,KAAK,EAAE,eAAC,CAAD,EAAkB;AACvB,gBAAI,MAAI,CAAC,QAAT,EAAmB;AAEnB,YAAA,CAAC,CAAC,eAAF;AAEA,gBAAI,MAAI,CAAC,SAAT,EAAoB;;AAEpB,YAAA,MAAI,CAAC,aAAL,GAAqB,IAArB,CAA0B;AAAA,qBAAM,MAAI,CAAC,IAAL,EAAN;AAAA,aAA1B;AACD;AATC;AAP4B,OAA3B,EAkBJ,CAAC,KAAK,SAAL,GAAiB,KAAK,WAAtB,GAAoC,KAAK,UAA1C,CAlBI,CAAP;AAmBD,KA7DM;AA8DP,IAAA,WA9DO,yBA8DI;AAAA;;AACT,aAAO,KAAK,cAAL,CAAoB,YAApB,EAA2B;AAChC,QAAA,WAAW,EAAE,2BADmB;AAEhC,QAAA,KAAK,EAAE;AACL,UAAA,KAAK,EAAE,KAAK,UAAL,GAAkB,KAAK,aAAvB,GAAuC;AADzC,SAFyB;AAKhC,QAAA,EAAE,EAAE;AACF,UAAA,KAAK,EAAE,eAAC,CAAD,EAAkB;AACvB,gBAAI,MAAI,CAAC,QAAT,EAAmB;AAEnB,YAAA,CAAC,CAAC,eAAF;AAEA,gBAAI,MAAI,CAAC,SAAT,EAAoB;;AAEpB,YAAA,MAAI,CAAC,aAAL,GAAqB,IAArB,CAA0B,YAAK;AAC7B;AACA,cAAA,MAAI,CAAC,SAAL,CAAe,YAAK;AAClB,gBAAA,MAAI,CAAC,UAAL,GAAkB,CAAC,MAAI,CAAC,UAAxB;AACA,gBAAA,MAAI,CAAC,eAAL,GAAuB,KAAvB;;AAEA,gBAAA,MAAI,CAAC,QAAL,CAAc,cAAd,CAA6B,MAAI,CAAC,GAAlC,EAAuC,MAAI,CAAC,UAA5C;;AACA,gBAAA,MAAI,CAAC,QAAL,CAAc,YAAd;AACD,eAND;AAOD,aATD;AAUD;AAlBC;AAL4B,OAA3B,EAyBJ,CAAC,KAAK,YAAN,CAzBI,CAAP;AA0BD,KAzFM;AA0FP,IAAA,OA1FO,qBA0FA;AAAA;;AACL,UAAM,QAAQ,GAAG,CAAC,KAAK,UAAL,EAAD,CAAjB;AAEA,UAAI,KAAK,UAAT,EAAqB,QAAQ,CAAC,OAAT,CAAiB,KAAK,WAAL,EAAjB;AACrB,UAAI,KAAK,WAAT,EAAsB,QAAQ,CAAC,OAAT,CAAiB,KAAK,SAAL,EAAjB;AAEtB,aAAO,KAAK,cAAL,CAAoB,KAApB,EAA2B,KAAK,YAAL,CAAkB,KAAK,QAAL,IAAiB,KAAK,KAAxC,EAA+C;AAC/E,QAAA,WAAW,EAAE,uBADkE;AAE/E,QAAA,KAAK,sBACF,KAAK,WADH,EACiB,KAAK,QADtB,CAF0E;AAK/E,QAAA,EAAE,EAAE;AACF,UAAA,KAAK,EAAE,iBAAK;AACV,gBAAI,MAAI,CAAC,QAAT,EAAmB;;AAEnB,gBAAI,MAAI,CAAC,WAAL,IAAoB,MAAI,CAAC,QAA7B,EAAuC;AACrC,cAAA,MAAI,CAAC,IAAL;AACD,aAFD,MAEO,IAAI,MAAI,CAAC,WAAT,EAAsB;AAC3B,cAAA,MAAI,CAAC,QAAL,GAAgB,CAAC,MAAI,CAAC,QAAtB;;AACA,cAAA,MAAI,CAAC,QAAL,CAAc,YAAd,CAA2B,MAAI,CAAC,GAAhC,EAAqC,MAAI,CAAC,QAA1C;;AACA,cAAA,MAAI,CAAC,QAAL,CAAc,UAAd;AACD;AACF;AAXC;AAL2E,OAA/C,CAA3B,EAkBH,QAlBG,CAAP;AAmBD,KAnHM;AAoHP,IAAA,QApHO,oBAoHG,IApHH,EAoHY;AACjB,aAAO,KAAK,cAAL,CAAoB,sBAApB,EAAmC;AACxC,QAAA,GAAG,EAAE,mCAAqB,IAArB,EAA2B,KAAK,OAAhC,CADmC;AAExC,QAAA,KAAK,EAAE;AACL,UAAA,WAAW,EAAE,KAAK,WADb;AAEL,UAAA,WAAW,EAAE,KAAK,WAFb;AAGL,UAAA,IAAI,EAAJ,IAHK;AAIL,UAAA,UAAU,EAAE,KAAK,UAJZ;AAKL,UAAA,aAAa,EAAE,KAAK,aALf;AAML,UAAA,KAAK,EAAE,KAAK,KANP;AAOL,UAAA,UAAU,EAAE,KAAK,UAPZ;AAQL,UAAA,iBAAiB,EAAE,KAAK,iBARnB;AASL,UAAA,OAAO,EAAE,KAAK,OATT;AAUL,UAAA,MAAM,EAAE,KAAK,MAVR;AAWL,UAAA,WAAW,EAAE,KAAK,WAXb;AAYL,UAAA,OAAO,EAAE,KAAK,OAZT;AAaL,UAAA,QAAQ,EAAE,KAAK,QAbV;AAcL,UAAA,YAAY,EAAE,KAAK,YAdd;AAeL,UAAA,YAAY,EAAE,KAAK,YAfd;AAgBL,UAAA,YAAY,EAAE,KAAK,YAhBd;AAiBL,UAAA,UAAU,EAAE,KAAK,UAjBZ;AAkBL,UAAA,WAAW,EAAE,KAAK,WAlBb;AAmBL,UAAA,OAAO,EAAE,KAAK,OAnBT;AAoBL,UAAA,MAAM,EAAE,KAAK;AApBR,SAFiC;AAwBxC,QAAA,WAAW,EAAE,KAAK;AAxBsB,OAAnC,CAAP;AA0BD,KA/IM;AAgJP,IAAA,kBAhJO,gCAgJW;AAChB,UAAI,CAAC,KAAK,MAAN,IAAgB,CAAC,KAAK,QAA1B,EAAoC,OAAO,IAAP;AAEpC,UAAM,QAAQ,GAAG,CAAC,KAAK,QAAL,CAAc,GAAd,CAAkB,KAAK,QAAvB,CAAD,CAAjB;AAEA,aAAO,KAAK,cAAL,CAAoB,KAApB,EAA2B;AAChC,QAAA,WAAW,EAAE;AADmB,OAA3B,EAEJ,QAFI,CAAP;AAGD,KAxJM;AAyJP,IAAA,aAzJO,2BAyJM;AACX,aAAO,KAAK,cAAL,CAAoB,8BAApB,EAAuC,CAAC,KAAK,kBAAL,EAAD,CAAvC,CAAP;AACD;AA3JM,GAnEwC;AAiOjD,EAAA,MAjOiD,kBAiOzC,CAjOyC,EAiOxC;AACP,QAAM,QAAQ,GAAG,CAAC,KAAK,OAAL,EAAD,CAAjB;AAEA,QAAI,KAAK,UAAT,EAAqB,QAAQ,CAAC,IAAT,CAAc,KAAK,aAAL,EAAd,EAArB,KACK,QAAQ,CAAC,IAAT,CAAc,KAAK,kBAAL,EAAd;AAEL,WAAO,CAAC,CAAC,KAAD,EAAQ;AACd,MAAA,WAAW,EAAE,iBADC;AAEd,MAAA,KAAK,EAAE;AACL,iCAAyB,CAAC,KAAK,WAD1B;AAEL,kCAA0B,KAAK,WAF1B;AAGL,qCAA6B,KAAK,QAH7B;AAIL,oCAA4B,KAAK,OAJ5B;AAKL,mCAA2B,KAAK,MAL3B;AAML,qCAA6B,KAAK,UAN7B;AAOL,qCAA6B,KAAK,QAAL,CAAc,UAAd,CAAyB,KAAK,GAA9B;AAPxB,OAFO;AAWd,MAAA,KAAK,EAAE;AACL,yBAAiB,MAAM,CAAC,KAAK,MAAN;AADlB;AAXO,KAAR,EAcL,QAdK,CAAR;AAeD;AAtPgD,CAApC,C","sourcesContent":["// Components\nimport { VExpandTransition } from '../transitions'\nimport { VIcon } from '../VIcon'\nimport VTreeview from './VTreeview'\nimport VTreeviewNode from './VTreeviewNode'\n\n// Mixins\nimport { inject as RegistrableInject } from '../../mixins/registrable'\nimport Colorable from '../../mixins/colorable'\n\n// Utils\nimport mixins, { ExtractVue } from '../../util/mixins'\nimport { getObjectValueByPath } from '../../util/helpers'\nimport { PropValidator } from 'vue/types/options'\n\n// Types\nimport { VNode } from 'vue'\n\ntype VTreeViewInstance = InstanceType<typeof VTreeview>\n\nconst baseMixins = mixins(\n  Colorable,\n  RegistrableInject('treeview')\n)\n\ninterface options extends ExtractVue<typeof baseMixins> {\n  treeview: VTreeViewInstance\n}\n\nexport const VTreeviewNodeProps = {\n  activatable: Boolean,\n  activeClass: {\n    type: String,\n    default: 'v-treeview-node--active',\n  },\n  color: {\n    type: String,\n    default: 'primary',\n  },\n  expandIcon: {\n    type: String,\n    default: '$vuetify.icons.subgroup',\n  },\n  indeterminateIcon: {\n    type: String,\n    default: '$vuetify.icons.checkboxIndeterminate',\n  },\n  itemChildren: {\n    type: String,\n    default: 'children',\n  },\n  itemDisabled: {\n    type: String,\n    default: 'disabled',\n  },\n  itemKey: {\n    type: String,\n    default: 'id',\n  },\n  itemText: {\n    type: String,\n    default: 'name',\n  },\n  loadChildren: Function as PropValidator<(item: any) => Promise<void>>,\n  loadingIcon: {\n    type: String,\n    default: '$vuetify.icons.loading',\n  },\n  offIcon: {\n    type: String,\n    default: '$vuetify.icons.checkboxOff',\n  },\n  onIcon: {\n    type: String,\n    default: '$vuetify.icons.checkboxOn',\n  },\n  openOnClick: Boolean,\n  rounded: Boolean,\n  selectable: Boolean,\n  selectedColor: {\n    type: String,\n    default: 'accent',\n  },\n  shaped: Boolean,\n  transition: Boolean,\n}\n\n/* @vue/component */\nexport default baseMixins.extend<options>().extend({\n  name: 'v-treeview-node',\n\n  inject: {\n    treeview: {\n      default: null,\n    },\n  },\n\n  props: {\n    item: {\n      type: Object,\n      default: () => null,\n    },\n    ...VTreeviewNodeProps,\n  },\n\n  data: () => ({\n    hasLoaded: false,\n    isActive: false, // Node is selected (row)\n    isIndeterminate: false, // Node has at least one selected child\n    isLoading: false,\n    isOpen: false, // Node is open/expanded\n    isSelected: false, // Node is selected (checkbox)\n  }),\n\n  computed: {\n    disabled (): string {\n      return getObjectValueByPath(this.item, this.itemDisabled)\n    },\n    key (): string {\n      return getObjectValueByPath(this.item, this.itemKey)\n    },\n    children (): any[] | null {\n      return getObjectValueByPath(this.item, this.itemChildren)\n    },\n    text (): string {\n      return getObjectValueByPath(this.item, this.itemText)\n    },\n    scopedProps (): object {\n      return {\n        item: this.item,\n        leaf: !this.children,\n        selected: this.isSelected,\n        indeterminate: this.isIndeterminate,\n        active: this.isActive,\n        open: this.isOpen,\n      }\n    },\n    computedIcon (): string {\n      if (this.isIndeterminate) return this.indeterminateIcon\n      else if (this.isSelected) return this.onIcon\n      else return this.offIcon\n    },\n    hasChildren (): boolean {\n      return !!this.children && (!!this.children.length || !!this.loadChildren)\n    },\n  },\n\n  created () {\n    this.treeview.register(this)\n  },\n\n  beforeDestroy () {\n    this.treeview.unregister(this)\n  },\n\n  methods: {\n    checkChildren (): Promise<void> {\n      return new Promise<void>(resolve => {\n        // TODO: Potential issue with always trying\n        // to load children if response is empty?\n        if (!this.children || this.children.length || !this.loadChildren || this.hasLoaded) return resolve()\n\n        this.isLoading = true\n        resolve(this.loadChildren(this.item))\n      }).then(() => {\n        this.isLoading = false\n        this.hasLoaded = true\n      })\n    },\n    open () {\n      this.isOpen = !this.isOpen\n      this.treeview.updateOpen(this.key, this.isOpen)\n      this.treeview.emitOpen()\n    },\n    genLabel () {\n      const children = []\n\n      if (this.$scopedSlots.label) children.push(this.$scopedSlots.label(this.scopedProps))\n      else children.push(this.text)\n\n      return this.$createElement('div', {\n        slot: 'label',\n        staticClass: 'v-treeview-node__label',\n      }, children)\n    },\n    genContent () {\n      const children = [\n        this.$scopedSlots.prepend && this.$scopedSlots.prepend(this.scopedProps),\n        this.genLabel(),\n        this.$scopedSlots.append && this.$scopedSlots.append(this.scopedProps),\n      ]\n\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__content',\n      }, children)\n    },\n    genToggle () {\n      return this.$createElement(VIcon, {\n        staticClass: 'v-treeview-node__toggle',\n        class: {\n          'v-treeview-node__toggle--open': this.isOpen,\n          'v-treeview-node__toggle--loading': this.isLoading,\n        },\n        slot: 'prepend',\n        on: {\n          click: (e: MouseEvent) => {\n            if (this.disabled) return\n\n            e.stopPropagation()\n\n            if (this.isLoading) return\n\n            this.checkChildren().then(() => this.open())\n          },\n        },\n      }, [this.isLoading ? this.loadingIcon : this.expandIcon])\n    },\n    genCheckbox () {\n      return this.$createElement(VIcon, {\n        staticClass: 'v-treeview-node__checkbox',\n        props: {\n          color: this.isSelected ? this.selectedColor : undefined,\n        },\n        on: {\n          click: (e: MouseEvent) => {\n            if (this.disabled) return\n\n            e.stopPropagation()\n\n            if (this.isLoading) return\n\n            this.checkChildren().then(() => {\n              // We nextTick here so that items watch in VTreeview has a chance to run first\n              this.$nextTick(() => {\n                this.isSelected = !this.isSelected\n                this.isIndeterminate = false\n\n                this.treeview.updateSelected(this.key, this.isSelected)\n                this.treeview.emitSelected()\n              })\n            })\n          },\n        },\n      }, [this.computedIcon])\n    },\n    genNode (): VNode {\n      const children = [this.genContent()]\n\n      if (this.selectable) children.unshift(this.genCheckbox())\n      if (this.hasChildren) children.unshift(this.genToggle())\n\n      return this.$createElement('div', this.setTextColor(this.isActive && this.color, {\n        staticClass: 'v-treeview-node__root',\n        class: {\n          [this.activeClass]: this.isActive,\n        },\n        on: {\n          click: () => {\n            if (this.disabled) return\n\n            if (this.openOnClick && this.children) {\n              this.open()\n            } else if (this.activatable) {\n              this.isActive = !this.isActive\n              this.treeview.updateActive(this.key, this.isActive)\n              this.treeview.emitActive()\n            }\n          },\n        },\n      }), children)\n    },\n    genChild (item: any): VNode {\n      return this.$createElement(VTreeviewNode, {\n        key: getObjectValueByPath(item, this.itemKey),\n        props: {\n          activatable: this.activatable,\n          activeClass: this.activeClass,\n          item,\n          selectable: this.selectable,\n          selectedColor: this.selectedColor,\n          color: this.color,\n          expandIcon: this.expandIcon,\n          indeterminateIcon: this.indeterminateIcon,\n          offIcon: this.offIcon,\n          onIcon: this.onIcon,\n          loadingIcon: this.loadingIcon,\n          itemKey: this.itemKey,\n          itemText: this.itemText,\n          itemDisabled: this.itemDisabled,\n          itemChildren: this.itemChildren,\n          loadChildren: this.loadChildren,\n          transition: this.transition,\n          openOnClick: this.openOnClick,\n          rounded: this.rounded,\n          shaped: this.shaped,\n        },\n        scopedSlots: this.$scopedSlots,\n      })\n    },\n    genChildrenWrapper (): any {\n      if (!this.isOpen || !this.children) return null\n\n      const children = [this.children.map(this.genChild)]\n\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__children',\n      }, children)\n    },\n    genTransition () {\n      return this.$createElement(VExpandTransition, [this.genChildrenWrapper()])\n    },\n  },\n\n  render (h): VNode {\n    const children = [this.genNode()]\n\n    if (this.transition) children.push(this.genTransition())\n    else children.push(this.genChildrenWrapper())\n\n    return h('div', {\n      staticClass: 'v-treeview-node',\n      class: {\n        'v-treeview-node--leaf': !this.hasChildren,\n        'v-treeview-node--click': this.openOnClick,\n        'v-treeview-node--disabled': this.disabled,\n        'v-treeview-node--rounded': this.rounded,\n        'v-treeview-node--shaped': this.shaped,\n        'v-treeview-node--selected': this.isSelected,\n        'v-treeview-node--excluded': this.treeview.isExcluded(this.key),\n      },\n      attrs: {\n        'aria-expanded': String(this.isOpen),\n      },\n    }, children)\n  },\n})\n"],"sourceRoot":"","file":"VTreeviewNode.js"}