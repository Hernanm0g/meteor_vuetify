{"version":3,"sources":["../../../../src/components/VCalendar/util/events.ts"],"names":[],"mappings":";;;;;;;;;AAAA;;AAuBM,SAAU,UAAV,CAAsB,KAAtB,EAA0C,KAA1C,EAAyD,aAAzD,EAAgF,WAAhF,EAAmG;AACvG,MAAI,EAAE,aAAa,IAAI,KAAnB,CAAJ,EAA+B;AAC7B,UAAM,IAAI,KAAJ,CAAU,SAAS,aAAT,GAAyB,0GAAnC,CAAN;AACD;;AAED,MAAM,KAAK,GAAe,+BAAe,KAAK,CAAC,aAAD,CAApB,CAA1B;AACA,MAAM,GAAG,GAAgB,KAAK,CAAC,WAAD,CAAL,GAAqB,+BAAe,KAAK,CAAC,WAAD,CAApB,CAArB,GAA0D,KAAnF;AACA,MAAM,eAAe,GAAW,iCAAiB,KAAjB,CAAhC;AACA,MAAM,wBAAwB,GAAW,uCAAuB,KAAvB,CAAzC;AACA,MAAM,aAAa,GAAW,iCAAiB,GAAjB,CAA9B;AACA,MAAM,sBAAsB,GAAW,uCAAuB,GAAvB,CAAvC;AACA,MAAM,MAAM,GAAY,CAAC,KAAK,CAAC,OAA/B;AAEA,SAAO;AAAE,IAAA,KAAK,EAAL,KAAF;AAAS,IAAA,KAAK,EAAL,KAAT;AAAgB,IAAA,eAAe,EAAf,eAAhB;AAAiC,IAAA,wBAAwB,EAAxB,wBAAjC;AAA2D,IAAA,GAAG,EAAH,GAA3D;AAAgE,IAAA,aAAa,EAAb,aAAhE;AAA+E,IAAA,sBAAsB,EAAtB,sBAA/E;AAAuG,IAAA,MAAM,EAAN,MAAvG;AAA+G,IAAA,KAAK,EAAL;AAA/G,GAAP;AACD;;AAEK,SAAU,SAAV,CAAqB,KAArB,EAA0C,aAA1C,EAA+D;AACnE,SAAO,aAAa,IAAI,KAAK,CAAC,eAAvB,IAA0C,aAAa,IAAI,KAAK,CAAC,aAAxE;AACD;;AAEK,SAAU,kBAAV,CAA8B,KAA9B,EAAmD,eAAnD,EAA4E,aAA5E,EAAiG;AACrG,SAAO,eAAe,IAAI,KAAK,CAAC,aAAzB,IAA0C,aAAa,IAAI,KAAK,CAAC,eAAxE;AACD","sourcesContent":["import {\n  VTimestamp,\n  parseTimestamp,\n  getDayIdentifier,\n  getTimestampIdentifier,\n} from './timestamp'\n\nexport interface VEventInput {\n  [prop: string]: any\n}\n\nexport interface VEventParsed {\n  input: VEventInput\n  start: VTimestamp\n  startIdentifier: number\n  startTimestampIdentifier: number\n  end: VTimestamp\n  endIdentifier: number\n  endTimestampIdentifier: number\n  allDay: boolean\n  index: number\n}\n\nexport function parseEvent (input: VEventInput, index: number, startProperty: string, endProperty: string): VEventParsed {\n  if (!(startProperty in input)) {\n    throw new Error('The ' + startProperty + ' property is required on all events to be a valid timestamp in the format YYYY-MM-DD or YYYY-MM-DD hh:mm')\n  }\n\n  const start: VTimestamp = parseTimestamp(input[startProperty]) as VTimestamp\n  const end: VTimestamp = (input[endProperty] ? parseTimestamp(input[endProperty]) : start) as VTimestamp\n  const startIdentifier: number = getDayIdentifier(start)\n  const startTimestampIdentifier: number = getTimestampIdentifier(start)\n  const endIdentifier: number = getDayIdentifier(end)\n  const endTimestampIdentifier: number = getTimestampIdentifier(end)\n  const allDay: boolean = !start.hasTime\n\n  return { input, start, startIdentifier, startTimestampIdentifier, end, endIdentifier, endTimestampIdentifier, allDay, index }\n}\n\nexport function isEventOn (event: VEventParsed, dayIdentifier: number): boolean {\n  return dayIdentifier >= event.startIdentifier && dayIdentifier <= event.endIdentifier\n}\n\nexport function isEventOverlapping (event: VEventParsed, startIdentifier: number, endIdentifier: number): boolean {\n  return startIdentifier <= event.endIdentifier && endIdentifier >= event.startIdentifier\n}\n"],"sourceRoot":"","file":"events.js"}